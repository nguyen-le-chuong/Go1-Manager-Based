--- git status ---
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .vscode/tasks.json
	modified:   .vscode/tools/launch.template.json
	modified:   README.md
	modified:   scripts/list_envs.py
	modified:   scripts/random_agent.py
	modified:   scripts/rsl_rl/__pycache__/cli_args.cpython-310.pyc
	modified:   scripts/rsl_rl/play.py
	modified:   scripts/rsl_rl/train.py
	modified:   scripts/zero_agent.py
	modified:   source/go1/config/extension.toml
	modified:   source/go1/docs/CHANGELOG.rst
	modified:   source/go1/go1/tasks/manager_based/go1/__init__.py
	modified:   source/go1/go1/tasks/manager_based/go1/agents/__init__.py
	modified:   source/go1/go1/tasks/manager_based/go1/agents/rsl_rl_ppo_cfg.py
	modified:   source/go1/go1/tasks/manager_based/go1/go1_env_cfg.py
	modified:   source/go1/go1/tasks/manager_based/go1/mdp/__init__.py
	modified:   source/go1/go1/tasks/manager_based/go1/mdp/rewards.py
	modified:   source/go1/go1/ui_extension_example.py
	modified:   source/go1/setup.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	out.out
	source/go1/go1/tasks/manager_based/go1/locomotion_env_cfg.py
	source/go1/go1/tasks/manager_based/go1/mdp/commands/
	source/go1/go1/tasks/manager_based/go1/mdp/curriculums.py
	source/go1/go1/tasks/manager_based/go1/mdp/observations.py

no changes added to commit (use "git add" and/or "git commit -a") 


--- git diff ---
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
index c2497b8..a405155 100644
--- a/.vscode/tasks.json
+++ b/.vscode/tasks.json
@@ -20,4 +20,4 @@
             "type": "promptString"
         },
     ]
-}
\ No newline at end of file
+}
diff --git a/.vscode/tools/launch.template.json b/.vscode/tools/launch.template.json
index 61e07a7..d8e2515 100644
--- a/.vscode/tools/launch.template.json
+++ b/.vscode/tools/launch.template.json
@@ -62,4 +62,4 @@
             },
         },
     ]
-}
\ No newline at end of file
+}
diff --git a/README.md b/README.md
index af599ca..87acad5 100644
--- a/README.md
+++ b/README.md
@@ -132,4 +132,4 @@ Some examples of packages that can likely be excluded are:
 "<path-to-isaac-sim>/extscache/omni.graph.*"        // Graph UI tools
 "<path-to-isaac-sim>/extscache/omni.services.*"     // Services tools
 ...
-```
\ No newline at end of file
+```
diff --git a/scripts/list_envs.py b/scripts/list_envs.py
index 3b19c5f..2bab474 100644
--- a/scripts/list_envs.py
+++ b/scripts/list_envs.py
@@ -24,11 +24,10 @@ simulation_app = app_launcher.app
 
 """Rest everything follows."""
 
+import go1.tasks  # noqa: F401
 import gymnasium as gym
 from prettytable import PrettyTable
 
-import go1.tasks  # noqa: F401
-
 
 def main():
     """Print all environments registered in `go1` extension."""
diff --git a/scripts/random_agent.py b/scripts/random_agent.py
index 148f873..0b5d88e 100644
--- a/scripts/random_agent.py
+++ b/scripts/random_agent.py
@@ -29,14 +29,12 @@ simulation_app = app_launcher.app
 
 """Rest everything follows."""
 
+import go1.tasks  # noqa: F401
 import gymnasium as gym
-import torch
-
 import isaaclab_tasks  # noqa: F401
+import torch
 from isaaclab_tasks.utils import parse_env_cfg
 
-import go1.tasks  # noqa: F401
-
 
 def main():
     """Random actions agent with Isaac Lab environment."""
diff --git a/scripts/rsl_rl/__pycache__/cli_args.cpython-310.pyc b/scripts/rsl_rl/__pycache__/cli_args.cpython-310.pyc
index 1a18b69..cf32d02 100644
Binary files a/scripts/rsl_rl/__pycache__/cli_args.cpython-310.pyc and b/scripts/rsl_rl/__pycache__/cli_args.cpython-310.pyc differ
diff --git a/scripts/rsl_rl/play.py b/scripts/rsl_rl/play.py
index dd3150e..c043e13 100644
--- a/scripts/rsl_rl/play.py
+++ b/scripts/rsl_rl/play.py
@@ -44,24 +44,25 @@ simulation_app = app_launcher.app
 
 """Rest everything follows."""
 
-import gymnasium as gym
 import os
 import time
-import torch
-
-from rsl_rl.runners import OnPolicyRunner
 
+import go1.tasks  # noqa: F401
+import gymnasium as gym
+import isaaclab_tasks  # noqa: F401
+import torch
 from isaaclab.envs import DirectMARLEnv, multi_agent_to_single_agent
 from isaaclab.utils.assets import retrieve_file_path
 from isaaclab.utils.dict import print_dict
 from isaaclab.utils.pretrained_checkpoint import get_published_pretrained_checkpoint
-
-from isaaclab_rl.rsl_rl import RslRlOnPolicyRunnerCfg, RslRlVecEnvWrapper, export_policy_as_jit, export_policy_as_onnx
-
-import isaaclab_tasks  # noqa: F401
+from isaaclab_rl.rsl_rl import (
+    RslRlOnPolicyRunnerCfg,
+    RslRlVecEnvWrapper,
+    export_policy_as_jit,
+    export_policy_as_onnx,
+)
 from isaaclab_tasks.utils import get_checkpoint_path, parse_env_cfg
-
-import go1.tasks  # noqa: F401
+from rsl_rl.runners import OnPolicyRunner
 
 
 def main():
diff --git a/scripts/rsl_rl/train.py b/scripts/rsl_rl/train.py
index e98c1ef..bb4e699 100644
--- a/scripts/rsl_rl/train.py
+++ b/scripts/rsl_rl/train.py
@@ -69,13 +69,13 @@ if args_cli.distributed and version.parse(installed_version) < version.parse(RSL
 
 """Rest everything follows."""
 
-import gymnasium as gym
 import os
-import torch
 from datetime import datetime
 
-from rsl_rl.runners import OnPolicyRunner
-
+import go1.tasks  # noqa: F401
+import gymnasium as gym
+import isaaclab_tasks  # noqa: F401
+import torch
 from isaaclab.envs import (
     DirectMARLEnv,
     DirectMARLEnvCfg,
@@ -85,14 +85,10 @@ from isaaclab.envs import (
 )
 from isaaclab.utils.dict import print_dict
 from isaaclab.utils.io import dump_pickle, dump_yaml
-
 from isaaclab_rl.rsl_rl import RslRlOnPolicyRunnerCfg, RslRlVecEnvWrapper
-
-import isaaclab_tasks  # noqa: F401
 from isaaclab_tasks.utils import get_checkpoint_path
 from isaaclab_tasks.utils.hydra import hydra_task_config
-
-import go1.tasks  # noqa: F401
+from rsl_rl.runners import OnPolicyRunner
 
 torch.backends.cuda.matmul.allow_tf32 = True
 torch.backends.cudnn.allow_tf32 = True
diff --git a/scripts/zero_agent.py b/scripts/zero_agent.py
index 14b67ff..068dccd 100644
--- a/scripts/zero_agent.py
+++ b/scripts/zero_agent.py
@@ -29,14 +29,12 @@ simulation_app = app_launcher.app
 
 """Rest everything follows."""
 
+import go1.tasks  # noqa: F401
 import gymnasium as gym
-import torch
-
 import isaaclab_tasks  # noqa: F401
+import torch
 from isaaclab_tasks.utils import parse_env_cfg
 
-import go1.tasks  # noqa: F401
-
 
 def main():
     """Zero actions agent with Isaac Lab environment."""
diff --git a/source/go1/config/extension.toml b/source/go1/config/extension.toml
index f62edba..54cc85a 100644
--- a/source/go1/config/extension.toml
+++ b/source/go1/config/extension.toml
@@ -32,4 +32,4 @@ name = "go1"
 # TODO: Uncomment and provide path to a ros_ws
 #       with rosdeps to be installed. If none,
 #       leave it commented out.
-# ros_ws = "path/from/extension_root/to/ros_ws"
\ No newline at end of file
+# ros_ws = "path/from/extension_root/to/ros_ws"
diff --git a/source/go1/docs/CHANGELOG.rst b/source/go1/docs/CHANGELOG.rst
index 4bd1d0c..f1c3abe 100644
--- a/source/go1/docs/CHANGELOG.rst
+++ b/source/go1/docs/CHANGELOG.rst
@@ -7,4 +7,4 @@ Changelog
 Added
 ^^^^^
 
-* Created an initial template for building an extension or project based on Isaac Lab
\ No newline at end of file
+* Created an initial template for building an extension or project based on Isaac Lab
diff --git a/source/go1/go1/tasks/manager_based/go1/__init__.py b/source/go1/go1/tasks/manager_based/go1/__init__.py
index 725f2d9..9daa2ec 100644
--- a/source/go1/go1/tasks/manager_based/go1/__init__.py
+++ b/source/go1/go1/tasks/manager_based/go1/__init__.py
@@ -12,12 +12,22 @@ from . import agents
 ##
 
 
+# gym.register(
+#     id="Template-Go1-v0",
+#     entry_point="isaaclab.envs:ManagerBasedRLEnv",
+#     disable_env_checker=True,
+#     kwargs={
+#         "env_cfg_entry_point": f"{__name__}.go1_env_cfg:Go1EnvCfg",
+#         "rsl_rl_cfg_entry_point": f"{agents.__name__}.rsl_rl_ppo_cfg:PPORunnerCfg",
+#     },
+# )
+
 gym.register(
     id="Template-Go1-v0",
     entry_point="isaaclab.envs:ManagerBasedRLEnv",
     disable_env_checker=True,
     kwargs={
-        "env_cfg_entry_point": f"{__name__}.go1_env_cfg:Go1EnvCfg",
-        "rsl_rl_cfg_entry_point": f"{agents.__name__}.rsl_rl_ppo_cfg:PPORunnerCfg",
+        "env_cfg_entry_point": f"{__name__}.go1_env_cfg:UnitreeGo1RoughEnvCfg",
+        "rsl_rl_cfg_entry_point": f"{agents.__name__}.rsl_rl_ppo_cfg:UnitreeGo1RoughPPORunnerCfg",
     },
 )
\ No newline at end of file
diff --git a/source/go1/go1/tasks/manager_based/go1/agents/__init__.py b/source/go1/go1/tasks/manager_based/go1/agents/__init__.py
index 1eb3849..e75ca2b 100644
--- a/source/go1/go1/tasks/manager_based/go1/agents/__init__.py
+++ b/source/go1/go1/tasks/manager_based/go1/agents/__init__.py
@@ -1,4 +1,4 @@
 # Copyright (c) 2022-2025, The Isaac Lab Project Developers.
 # All rights reserved.
 #
-# SPDX-License-Identifier: BSD-3-Clause
\ No newline at end of file
+# SPDX-License-Identifier: BSD-3-Clause
diff --git a/source/go1/go1/tasks/manager_based/go1/agents/rsl_rl_ppo_cfg.py b/source/go1/go1/tasks/manager_based/go1/agents/rsl_rl_ppo_cfg.py
index 24a741d..32899f1 100644
--- a/source/go1/go1/tasks/manager_based/go1/agents/rsl_rl_ppo_cfg.py
+++ b/source/go1/go1/tasks/manager_based/go1/agents/rsl_rl_ppo_cfg.py
@@ -4,8 +4,11 @@
 # SPDX-License-Identifier: BSD-3-Clause
 
 from isaaclab.utils import configclass
-
-from isaaclab_rl.rsl_rl import RslRlOnPolicyRunnerCfg, RslRlPpoActorCriticCfg, RslRlPpoAlgorithmCfg
+from isaaclab_rl.rsl_rl import (
+    RslRlOnPolicyRunnerCfg,
+    RslRlPpoActorCriticCfg,
+    RslRlPpoAlgorithmCfg,
+)
 
 
 @configclass
@@ -34,4 +37,33 @@ class PPORunnerCfg(RslRlOnPolicyRunnerCfg):
         lam=0.95,
         desired_kl=0.01,
         max_grad_norm=1.0,
+    )
+
+
+@configclass
+class UnitreeGo1RoughPPORunnerCfg(RslRlOnPolicyRunnerCfg):
+    num_steps_per_env = 24
+    max_iterations = 1500
+    save_interval = 400
+    experiment_name = "unitree_go1_rough"
+    empirical_normalization = False
+    policy = RslRlPpoActorCriticCfg(
+        init_noise_std=1.0,
+        actor_hidden_dims=[512, 256, 128],
+        critic_hidden_dims=[512, 256, 128],
+        activation="elu",
+    )
+    algorithm = RslRlPpoAlgorithmCfg(
+        value_loss_coef=1.0,
+        use_clipped_value_loss=True,
+        clip_param=0.2,
+        entropy_coef=0.01,
+        num_learning_epochs=5,
+        num_mini_batches=4,
+        learning_rate=1.0e-3,
+        schedule="adaptive",
+        gamma=0.99,
+        lam=0.95,
+        desired_kl=0.01,
+        max_grad_norm=1.0,
     )
\ No newline at end of file
diff --git a/source/go1/go1/tasks/manager_based/go1/go1_env_cfg.py b/source/go1/go1/tasks/manager_based/go1/go1_env_cfg.py
index bced8f7..61ed3c0 100644
--- a/source/go1/go1/tasks/manager_based/go1/go1_env_cfg.py
+++ b/source/go1/go1/tasks/manager_based/go1/go1_env_cfg.py
@@ -1,180 +1,54 @@
-# Copyright (c) 2022-2025, The Isaac Lab Project Developers.
-# All rights reserved.
-#
-# SPDX-License-Identifier: BSD-3-Clause
-
-import math
-
-import isaaclab.sim as sim_utils
-from isaaclab.assets import ArticulationCfg, AssetBaseCfg
-from isaaclab.envs import ManagerBasedRLEnvCfg
-from isaaclab.managers import EventTermCfg as EventTerm
-from isaaclab.managers import ObservationGroupCfg as ObsGroup
-from isaaclab.managers import ObservationTermCfg as ObsTerm
-from isaaclab.managers import RewardTermCfg as RewTerm
-from isaaclab.managers import SceneEntityCfg
-from isaaclab.managers import TerminationTermCfg as DoneTerm
-from isaaclab.scene import InteractiveSceneCfg
-from isaaclab.utils import configclass
-
-from . import mdp
+from go1.tasks.manager_based.go1.locomotion_env_cfg import LocomotionVelocityRoughEnvCfg
 
 ##
 # Pre-defined configs
 ##
-
-from isaaclab_assets.robots.cartpole import CARTPOLE_CFG  # isort:skip
-
-
-##
-# Scene definition
-##
-
-
-@configclass
-class Go1SceneCfg(InteractiveSceneCfg):
-    """Configuration for a cart-pole scene."""
-
-    # ground plane
-    ground = AssetBaseCfg(
-        prim_path="/World/ground",
-        spawn=sim_utils.GroundPlaneCfg(size=(100.0, 100.0)),
-    )
-
-    # robot
-    robot: ArticulationCfg = CARTPOLE_CFG.replace(prim_path="{ENV_REGEX_NS}/Robot")
-
-    # lights
-    dome_light = AssetBaseCfg(
-        prim_path="/World/DomeLight",
-        spawn=sim_utils.DomeLightCfg(color=(0.9, 0.9, 0.9), intensity=500.0),
-    )
-
-
-##
-# MDP settings
-##
-
-
-@configclass
-class ActionsCfg:
-    """Action specifications for the MDP."""
-
-    joint_effort = mdp.JointEffortActionCfg(asset_name="robot", joint_names=["slider_to_cart"], scale=100.0)
-
-
-@configclass
-class ObservationsCfg:
-    """Observation specifications for the MDP."""
-
-    @configclass
-    class PolicyCfg(ObsGroup):
-        """Observations for policy group."""
-
-        # observation terms (order preserved)
-        joint_pos_rel = ObsTerm(func=mdp.joint_pos_rel)
-        joint_vel_rel = ObsTerm(func=mdp.joint_vel_rel)
-
-        def __post_init__(self) -> None:
-            self.enable_corruption = False
-            self.concatenate_terms = True
-
-    # observation groups
-    policy: PolicyCfg = PolicyCfg()
-
-
-@configclass
-class EventCfg:
-    """Configuration for events."""
-
-    # reset
-    reset_cart_position = EventTerm(
-        func=mdp.reset_joints_by_offset,
-        mode="reset",
-        params={
-            "asset_cfg": SceneEntityCfg("robot", joint_names=["slider_to_cart"]),
-            "position_range": (-1.0, 1.0),
-            "velocity_range": (-0.5, 0.5),
-        },
-    )
-
-    reset_pole_position = EventTerm(
-        func=mdp.reset_joints_by_offset,
-        mode="reset",
-        params={
-            "asset_cfg": SceneEntityCfg("robot", joint_names=["cart_to_pole"]),
-            "position_range": (-0.25 * math.pi, 0.25 * math.pi),
-            "velocity_range": (-0.25 * math.pi, 0.25 * math.pi),
-        },
-    )
-
-
-@configclass
-class RewardsCfg:
-    """Reward terms for the MDP."""
-
-    # (1) Constant running reward
-    alive = RewTerm(func=mdp.is_alive, weight=1.0)
-    # (2) Failure penalty
-    terminating = RewTerm(func=mdp.is_terminated, weight=-2.0)
-    # (3) Primary task: keep pole upright
-    pole_pos = RewTerm(
-        func=mdp.joint_pos_target_l2,
-        weight=-1.0,
-        params={"asset_cfg": SceneEntityCfg("robot", joint_names=["cart_to_pole"]), "target": 0.0},
-    )
-    # (4) Shaping tasks: lower cart velocity
-    cart_vel = RewTerm(
-        func=mdp.joint_vel_l1,
-        weight=-0.01,
-        params={"asset_cfg": SceneEntityCfg("robot", joint_names=["slider_to_cart"])},
-    )
-    # (5) Shaping tasks: lower pole angular velocity
-    pole_vel = RewTerm(
-        func=mdp.joint_vel_l1,
-        weight=-0.005,
-        params={"asset_cfg": SceneEntityCfg("robot", joint_names=["cart_to_pole"])},
-    )
-
-
-@configclass
-class TerminationsCfg:
-    """Termination terms for the MDP."""
-
-    # (1) Time out
-    time_out = DoneTerm(func=mdp.time_out, time_out=True)
-    # (2) Cart out of bounds
-    cart_out_of_bounds = DoneTerm(
-        func=mdp.joint_pos_out_of_manual_limit,
-        params={"asset_cfg": SceneEntityCfg("robot", joint_names=["slider_to_cart"]), "bounds": (-3.0, 3.0)},
-    )
-
-
-##
-# Environment configuration
-##
+from isaaclab.utils import configclass
+from isaaclab_assets.robots.unitree import UNITREE_GO1_CFG  # isort: skip
 
 
 @configclass
-class Go1EnvCfg(ManagerBasedRLEnvCfg):
-    # Scene settings
-    scene: Go1SceneCfg = Go1SceneCfg(num_envs=4096, env_spacing=4.0)
-    # Basic settings
-    observations: ObservationsCfg = ObservationsCfg()
-    actions: ActionsCfg = ActionsCfg()
-    events: EventCfg = EventCfg()
-    # MDP settings
-    rewards: RewardsCfg = RewardsCfg()
-    terminations: TerminationsCfg = TerminationsCfg()
-
-    # Post initialization
-    def __post_init__(self) -> None:
-        """Post initialization."""
-        # general settings
-        self.decimation = 2
-        self.episode_length_s = 5
-        # viewer settings
-        self.viewer.eye = (8.0, 0.0, 5.0)
-        # simulation settings
-        self.sim.dt = 1 / 120
-        self.sim.render_interval = self.decimation
\ No newline at end of file
+class UnitreeGo1RoughEnvCfg(LocomotionVelocityRoughEnvCfg):
+    def __post_init__(self):
+        # post init of parent
+        super().__post_init__()
+
+        self.scene.robot = UNITREE_GO1_CFG.replace(prim_path="{ENV_REGEX_NS}/Robot")
+        self.scene.height_scanner.prim_path = "{ENV_REGEX_NS}/Robot/trunk"
+        # scale down the terrains because the robot is small
+        self.scene.terrain.terrain_generator.sub_terrains["boxes"].grid_height_range = (0.025, 0.1)
+        self.scene.terrain.terrain_generator.sub_terrains["random_rough"].noise_range = (0.01, 0.06)
+        self.scene.terrain.terrain_generator.sub_terrains["random_rough"].noise_step = 0.01
+
+        # reduce action scale
+        self.actions.joint_pos.scale = 0.25
+
+        # event
+        self.events.push_robot = None
+        self.events.add_base_mass.params["mass_distribution_params"] = (-1.0, 3.0)
+        self.events.add_base_mass.params["asset_cfg"].body_names = "trunk"
+        self.events.base_external_force_torque.params["asset_cfg"].body_names = "trunk"
+        self.events.reset_robot_joints.params["position_range"] = (1.0, 1.0)
+        self.events.reset_base.params = {
+            "pose_range": {"x": (-0.5, 0.5), "y": (-0.5, 0.5), "yaw": (-3.14, 3.14)},
+            "velocity_range": {
+                "x": (0.0, 0.0),
+                "y": (0.0, 0.0),
+                "z": (0.0, 0.0),
+                "roll": (0.0, 0.0),
+                "pitch": (0.0, 0.0),
+                "yaw": (0.0, 0.0),
+            },
+        }
+
+        # rewards
+        self.rewards.feet_air_time.params["sensor_cfg"].body_names = ".*_foot"
+        self.rewards.feet_air_time.weight = 0.01
+        self.rewards.undesired_contacts = None
+        self.rewards.dof_torques_l2.weight = -0.0002
+        self.rewards.track_lin_vel_xy_exp.weight = 1.5
+        self.rewards.track_ang_vel_z_exp.weight = 0.75
+        self.rewards.dof_acc_l2.weight = -2.5e-7
+
+        # terminations
+        self.terminations.base_contact.params["sensor_cfg"].body_names = "trunk"
\ No newline at end of file
diff --git a/source/go1/go1/tasks/manager_based/go1/mdp/__init__.py b/source/go1/go1/tasks/manager_based/go1/mdp/__init__.py
index 4487211..e3646dc 100644
--- a/source/go1/go1/tasks/manager_based/go1/mdp/__init__.py
+++ b/source/go1/go1/tasks/manager_based/go1/mdp/__init__.py
@@ -8,3 +8,5 @@
 from isaaclab.envs.mdp import *  # noqa: F401, F403
 
 from .rewards import *  # noqa: F401, F403
+from .curriculums import *  # noqa: F401, F403
+from .observations import *
\ No newline at end of file
diff --git a/source/go1/go1/tasks/manager_based/go1/mdp/rewards.py b/source/go1/go1/tasks/manager_based/go1/mdp/rewards.py
index acfc738..711d89d 100644
--- a/source/go1/go1/tasks/manager_based/go1/mdp/rewards.py
+++ b/source/go1/go1/tasks/manager_based/go1/mdp/rewards.py
@@ -5,12 +5,13 @@
 
 from __future__ import annotations
 
-import torch
 from typing import TYPE_CHECKING
 
+import torch
 from isaaclab.assets import Articulation
 from isaaclab.managers import SceneEntityCfg
 from isaaclab.utils.math import wrap_to_pi
+from isaaclab.sensors import ContactSensor
 
 if TYPE_CHECKING:
     from isaaclab.envs import ManagerBasedRLEnv
@@ -24,3 +25,24 @@ def joint_pos_target_l2(env: ManagerBasedRLEnv, target: float, asset_cfg: SceneE
     joint_pos = wrap_to_pi(asset.data.joint_pos[:, asset_cfg.joint_ids])
     # compute the reward
     return torch.sum(torch.square(joint_pos - target), dim=1)
+
+def feet_air_time(
+    env: ManagerBasedRLEnv, command_name: str, sensor_cfg: SceneEntityCfg, threshold: float
+) -> torch.Tensor:
+    """Reward long steps taken by the feet using L2-kernel.
+
+    This function rewards the agent for taking steps that are longer than a threshold. This helps ensure
+    that the robot lifts its feet off the ground and takes steps. The reward is computed as the sum of
+    the time for which the feet are in the air.
+
+    If the commands are small (i.e. the agent is not supposed to take a step), then the reward is zero.
+    """
+    # extract the used quantities (to enable type-hinting)
+    contact_sensor: ContactSensor = env.scene.sensors[sensor_cfg.name]
+    # compute the reward
+    first_contact = contact_sensor.compute_first_contact(env.step_dt)[:, sensor_cfg.body_ids]
+    last_air_time = contact_sensor.data.last_air_time[:, sensor_cfg.body_ids]
+    reward = torch.sum((last_air_time - threshold) * first_contact, dim=1)
+    # no reward for zero command
+    reward *= torch.norm(env.command_manager.get_command(command_name)[:, :2], dim=1) > 0.1
+    return reward
\ No newline at end of file
diff --git a/source/go1/go1/ui_extension_example.py b/source/go1/go1/ui_extension_example.py
index 91274cf..47cca12 100644
--- a/source/go1/go1/ui_extension_example.py
+++ b/source/go1/go1/ui_extension_example.py
@@ -43,4 +43,4 @@ class ExampleExtension(omni.ext.IExt):
                     omni.ui.Button("Reset", clicked_fn=on_reset)
 
     def on_shutdown(self):
-        print("[go1] shutdown")
\ No newline at end of file
+        print("[go1] shutdown")
diff --git a/source/go1/setup.py b/source/go1/setup.py
index b0c43e1..6763198 100644
--- a/source/go1/setup.py
+++ b/source/go1/setup.py
@@ -6,8 +6,8 @@
 """Installation script for the 'go1' python package."""
 
 import os
-import toml
 
+import toml
 from setuptools import setup
 
 # Obtain the extension data from the extension.toml file
@@ -41,4 +41,4 @@ setup(
         "Isaac Sim :: 4.5.0",
     ],
     zip_safe=False,
-)
\ No newline at end of file
+)